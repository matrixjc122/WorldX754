//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using System.Collections.Generic;
using UnityEngine;

namespace RuleAdministration.Administrators
{       
		/// <summary>
		/// Coral rule administrator.
		/// </summary>
		public class ActionAdministrator : IRuleAdministrator
		{

		public static GameObject ActionAdministratorEmpty{ get; set;}

		void Update()
		{
			foreach (IRepeatableAction ac in TriggerEventActionList) 
			{
				//this.ApplyTriggerActionGlobal();
			}
		}

		public List<IRepeatableAction> TriggerEventActionList{ set; get;}

			
				private static ActionAdministrator _instance = new ActionAdministrator ();
				private Dictionary<string, Dictionary<string,IAction> > _AssociatedRules;
				public IErrorMessage _ErrorMessage = new ErrorMessage ();
			

				/// <summary>
				/// Gets the instance.
				/// </summary>
				/// <value>The instance.</value>
				public static ActionAdministrator Instance {
						get {
								if (_instance == null) {
										_instance = new ActionAdministrator ();
								}
								return _instance;
						}
				}

//				public void RegisterRule (string type, IAction rule)
//				{
//						if (_AssociatedRules == null)
//								_AssociatedRules = new Dictionary<string , Dictionary<string,IAction> > ();
//						if (!_AssociatedRules.ContainsKey (type))
//								_AssociatedRules.Add (type, new Dictionary<string, IAction> ()); 
//						_AssociatedRules [type].Add (rule.Name(), rule);
//				}
//
//		#region IRuleAdministrator implementation
//
//		public void ApplyTriggerActionGlobal<T> () where T : new()
//		{
//			throw new NotImplementedException ();
//		}
//
//		public void ApplyTriggerActionGlobal (IRepeatableAction action)
//		{
//			for(int x = 0 ; x < worldXSingelton.WorldObjects.GetLength(0); x++)
//			{
//				for(int y = 0 ; y < worldXSingelton.WorldObjects.GetLength(1); y++)
//				{
//					this.ApplyAction(worldXSingelton.WorldObjects[x,y], action);
//				}	
//			}
//		}

//		#endregion


			public void ApplyActionGlobal<T> () where T : new()
			{
				ApplyActionGlobal(new T() as IAction);	
			}
	
			public void ApplyActionGlobal (IAction action)
			{
				// do some global update (e.g. change intensities
				
			GameObject[] arr = new GameObject[(int)worldXSingelton.WorldSize.x * (int)worldXSingelton.WorldSize.y];
			Buffer.BlockCopy (worldXSingelton.WorldObjects, 0, arr, 0, (int)worldXSingelton.WorldSize.x * (int)worldXSingelton.WorldSize.y);
				
			this.ApplyAction(action,arr);
				
			}
		
  			/// <summary>
			/// Initializes a new instance of the <see cref="RuleAdministration.Administrators.CoralRuleAdministrator"/> class.
			/// </summary>
			private ActionAdministrator ()
			:base()
			{
			// init TriggerEventActionList
			TriggerEventActionList = new List<IRepeatableAction> ();
			}

			
	
		public void ApplyAction (IAction action, params GameObject[] list)
			{

			bool state = true;
			state &= action.IsApplicable (list);
			if(state) {
				state &= action.Update (list);
				
				//--------------------------------
				Debug.Log(action.Name () + " Processed " + state);
				//--------------------------------
				
			} else {
				//--------------------------------
				Debug.Log(action.Name () + " is not applicable!");
				//--------------------------------
				
			}	
		}
		
		
		
		/// <summary>
		/// Applies the rules. 
		/// </summary>
				
				public void ApplyAction<T> (params GameObject[] current) where T:new()
				{
					ApplyAction(new T() as IAction, current);
				}
				
		}
}

