//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using System.Collections.Generic;
using UnityEngine;
using RuleAdministration.Rules;

namespace RuleAdministration.Administrators
{       
		/// <summary>
		/// Coral rule administrator.
		/// </summary>
		public class ActionAdministrator : IRuleAdministrator
		{

		public static GameObject ActionAdministratorEmpty{ get; set;}

		void Update()
		{
			foreach (IRepeatableAction ac in TriggerEventActionList) 
			{
				//this.ApplyTriggerActionGlobal();
			}
		}

		public List<IRepeatableAction> TriggerEventActionList{ set; get;}

			
				private static ActionAdministrator _instance = new ActionAdministrator ();
				private Dictionary<string, Dictionary<string,IAction> > _AssociatedRules;
				public IErrorMessage _ErrorMessage = new ErrorMessage ();
			

				/// <summary>
				/// Gets the instance.
				/// </summary>
				/// <value>The instance.</value>
				public static ActionAdministrator Instance {
						get {
								if (_instance == null) {
										_instance = new ActionAdministrator ();
								}
								return _instance;
						}
				}

//				public void RegisterRule (string type, IAction rule)
//				{
//						if (_AssociatedRules == null)
//								_AssociatedRules = new Dictionary<string , Dictionary<string,IAction> > ();
//						if (!_AssociatedRules.ContainsKey (type))
//								_AssociatedRules.Add (type, new Dictionary<string, IAction> ()); 
//						_AssociatedRules [type].Add (rule.Name(), rule);
//				}
//
//		#region IRuleAdministrator implementation
//
//		public void ApplyTriggerActionGlobal<T> () where T : new()
//		{
//			throw new NotImplementedException ();
//		}
//
//		public void ApplyTriggerActionGlobal (IRepeatableAction action)
//		{
//			for(int x = 0 ; x < worldXSingelton.WorldObjects.GetLength(0); x++)
//			{
//				for(int y = 0 ; y < worldXSingelton.WorldObjects.GetLength(1); y++)
//				{
//					this.ApplyAction(worldXSingelton.WorldObjects[x,y], action);
//				}	
//			}
//		}

//		#endregion


			public void ApplyActionGlobal<T> () where T : new()
			{
				ApplyActionGlobal(new T() as IAction);	
			}
	
			public void ApplyActionGlobal (IAction action)
			{
				// do some global update (e.g. change intensities
				
			List<Common> arr = new List<Common>();
			foreach( Common obj in worldXSingelton.WorldObjects )
			{
				arr.Add(obj);
			}
				
			this.ApplyAction(action,arr.ToArray());
				
			}
			
			private ActionAdministrator ()
			:base()
			{
			// init TriggerEventActionList
			TriggerEventActionList = new List<IRepeatableAction> ();
			}

		public void ApplyRandomAccessAction<T> (params Common[] list) where T:new()
		{
			ApplyRandomAccessAction(new T() as IAction, list);
		}
			
		public void ApplyRandomAccessAction (IAction action, params Common[] objects)
		{
			System.Random rng = new System.Random();
			
			LocalRandomSelectionAction raa = new LocalRandomSelectionAction();
			raa.SingleAction = action;
			raa.CurrentObject = objects[0];
			raa.Radius = 1;
			
			Common[] list = raa.GetRandomObjects(rng);
			
			ApplyAction(action, list);
		}
	
		public void ApplyAction (IAction action, params Common[] list)
			{

			foreach(Common obj in list)
			{
				action.CurrentObject = obj;
				
				if(action.IsApplicable() == true) {
					action.BeforeUpdate();
					action.Update();
					
					//--------------------------------
					Debug.Log(action.Name () + " Processed");
					//--------------------------------
					
				} else {
					//--------------------------------
					Debug.Log(action.Name () + " is not applicable!");
					//--------------------------------
					
				}	
			}
		}
				
		public void ApplyAction<T> (params Common[] current) where T:new()
		{
			ApplyAction(new T() as IAction, current);
		}
		
		public void ApplyActionAtNeighbors<T>(Vector2 center_pos, bool [,] Neighborhood) where T:new()
		{
			for (int x =0; x < Neighborhood.GetLength(0); x++) 
			{
				for (int y =0; y < Neighborhood.GetLength(1); y++) 
				{
					if(Neighborhood[x,y] == true)
					{
						int width = worldXSingelton.WorldObjects.GetLength(0);
						int height = worldXSingelton.WorldObjects.GetLength(1);
						int world_width = worldXSingelton.WorldObjects.GetLength(0);
						int world_height = worldXSingelton.WorldObjects.GetLength(1);
						
						//go to upper left corner of the mask array relative to current pos_self
						Vector2 pos_local = center_pos + new Vector2(-1,-1);
						
						pos_local.x += x;
						pos_local.y += y;
						
						
						if(pos_local.x < 0)
						{
							//						Debug.Log(pos_ul.x + x);
							continue;
						}
						if(pos_local.x >= width && pos_local.x >= world_width)
						{
							//						Debug.Log(pos_ul.x + x);
							continue;
						}
						if(pos_local.y < 0)
						{
							//						Debug.Log(pos_ul.y + y);
							continue;
						}
						if(pos_local.y >= height && pos_local.y >= world_height)
						{
							//						Debug.Log(pos_ul.y + y);
							continue;
						}
						
						ApplyAction(new T() as IAction, worldXSingelton.WorldObjects[(int)pos_local.x,(int)pos_local.y]);
					}
				}			
			}
		}
				
		}
}

