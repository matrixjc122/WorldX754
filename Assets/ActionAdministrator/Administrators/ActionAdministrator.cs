//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using System.Collections.Generic;
using UnityEngine;
using RuleAdministration.Rules;

namespace RuleAdministration.Administrators
{       
	/// <summary>
	/// Coral rule administrator.
	/// </summary>
	public class ActionAdministrator : IRuleAdministrator
	{


			
		private static ActionAdministrator _instance = new ActionAdministrator ();
		private Dictionary<string, Dictionary<string,IAction> > _AssociatedRules;
//		public IErrorMessage _ErrorMessage = new ErrorMessage ();
			

		/// <summary>
		/// Gets the instance.
		/// </summary>
		/// <value>The instance.</value>
		public static ActionAdministrator Instance {
			get {
				if (_instance == null) {
					_instance = new ActionAdministrator ();
				}
				return _instance;
			}
		}

//				public void RegisterRule (string type, IAction rule)
//				{
//						if (_AssociatedRules == null)
//								_AssociatedRules = new Dictionary<string , Dictionary<string,IAction> > ();
//						if (!_AssociatedRules.ContainsKey (type))
//								_AssociatedRules.Add (type, new Dictionary<string, IAction> ()); 
//						_AssociatedRules [type].Add (rule.Name(), rule);
//				}
//
//		#region IRuleAdministrator implementation
//
//		public void ApplyTriggerActionGlobal<T> () where T : new()
//		{
//			throw new NotImplementedException ();
//		}
//
//		public void ApplyTriggerActionGlobal (IRepeatableAction action)
//		{
//			for(int x = 0 ; x < worldXSingelton.WorldObjects.GetLength(0); x++)
//			{
//				for(int y = 0 ; y < worldXSingelton.WorldObjects.GetLength(1); y++)
//				{
//					this.ApplyAction(worldXSingelton.WorldObjects[x,y], action);
//				}	
//			}
//		}

//		#endregion


			
		private ActionAdministrator ()
			:base()
		{
		}

		public void ApplyAction<SelectorType, ActionType> (params Tile[] list) where SelectorType:new() where ActionType:new()
		{
			ApplyAction (new SelectorType () as ISelector, new ActionType () as IAction, list);
		}
		
		public void ApplyAction<ActionType> (ISelector selector, params Tile[] list) where ActionType:new()
		{
			ApplyAction (selector, new ActionType () as IAction, list);
		}
			
		public void ApplyAction (ISelector selector, IAction action, params Tile[] objects)
		{
			// Create Random Selector
			ApplyAction (action, selector.GetSelectedObjects ());
		}
	
		public void ApplyAction (IAction action, params Tile[] list)
		{

			foreach (Tile tile in list) {
				action._Tile = tile;
				action.BeforeUpdate ();
				if (action.IsApplicable () == true) {
					
					action.Update ();
					action.AfterUpdate ();
					
					//--------------------------------
//					Debug.Log (action.Name () + " Processed");
					//--------------------------------
					
				} else {
					//--------------------------------
//					Debug.Log (action.Name () + " is not applicable!");
					//--------------------------------
					
				}	
			}
		}
				
		public void ApplyAction<T> (params Tile[] current) where T:new()
		{
			ApplyAction (new T () as IAction, current);
		}
		
	}
}

