//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using UnityEngine;
using System.Collections.Generic;
using RuleAdministration.Administrators;
using System.Collections;
using System.Linq;
	
namespace RuleAdministration.Rules
{
	public class LocalRandomSelector : ISelector
	{
		private TileAccessor m_Tile;
		public int Radius{get;set;}

		public TileAccessor Tile {
			get {
				return m_Tile;
			}
			set {
				m_Tile = value;
			}
		}
		
		public LocalRandomSelector (Vector2 currentPos, int radius)
		{
			this.Radius = radius;
			this.Tile = new TileAccessor(currentPos);	
			
		}
		
		
		
		public LocalRandomSelector (TileAccessor locator, int radius)
		{
			this.Radius = radius;
			this.Tile = locator;	
		}
		
			
		public TileAccessor[] GetSelectedObjects ()
		{
			System.Random random = new System.Random();
			
			int n = random.Next (1, (2*Radius+1)^2);
			
			Vector2 origin = this.m_Tile.TilePosition;
			
			HashSet<Vector2> result_pos = new HashSet<Vector2>();
			List<TileAccessor> result = new List<TileAccessor>();
			for (int i = 0; i < n;) {
				Vector2 pos = new Vector2(
					random.Next (((int)origin.x - Radius) < 0 ? 0 : (int)origin.x - Radius,
				             ((int)origin.x + Radius) >= worldXSingelton.Layer2Objects.GetLength(0) ? worldXSingelton.Layer2Objects.GetLength(0) - 1: ((int)origin.x + Radius)),
					random.Next (((int)origin.y - Radius) < 0 ? 0 : (int)origin.y - Radius,
				             ((int)origin.x + Radius) >= worldXSingelton.Layer2Objects.GetLength(1) ? worldXSingelton.Layer2Objects.GetLength(1) - 1: ((int)origin.y + Radius))
				               );
				
				
				if(pos == this.Tile.TilePosition) continue;
				if(result_pos.Contains(pos)) continue;
				
				result_pos.Add(pos);
				result.Add(new TileAccessor(pos));
				
				i++; 
				}
			
			return result.ToArray();		
		}
	}
}

