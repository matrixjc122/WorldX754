//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using UnityEngine;
using System.Collections.Generic;
using RuleAdministration.Administrators;
using System.Collections;
	
namespace RuleAdministration.Rules
{
	public class LocalRandomSelectionAction : IRandomAction
	{
		
		public LocalRandomSelectionAction (){}
		
		public Common CurrentObject{get;set;}
		public int MaximalNumberOfObjects{get; set;}
		public int Radius{get; set;}
		public IAction SingleAction{get;set;}
			
		public Common[] GetRandomObjects (System.Random random)
		{
			Common[] result;
			int n = random.Next (1, (2*Radius+1)^2);
			result = new Common[n];
			Vector2 pos = CurrentObject.FigurePosition;
			
			for (int i = 0; i < n; i++) {
				result [i] = 
				worldXSingelton.WorldObjects [
              	random.Next (((int)pos.x - Radius) < 0 ? 0 : (int)pos.x - Radius,
              	((int)pos.x + Radius) >= worldXSingelton.WorldObjects.GetLength(0) ? worldXSingelton.WorldObjects.GetLength(0) - 1: ((int)pos.x + Radius)),
              	random.Next (((int)pos.y - Radius) < 0 ? 0 : (int)pos.y - Radius,
	            ((int)pos.x + Radius) >= worldXSingelton.WorldObjects.GetLength(1) ? worldXSingelton.WorldObjects.GetLength(1) - 1: ((int)pos.y + Radius))
				];
			}
			return result;		
		}
		
		public bool IsApplicable ()
		{
			this.SingleAction.CurrentObject = this.CurrentObject;
			return this.SingleAction.IsApplicable();
		}
			
		public string Name ()
		{
			return "Random Neighborhood Access Action";
		}
			
		public void Update ()
		{
			this.SingleAction.Update();
		}

		public void BeforeUpdate ()
		{
			this.SingleAction.BeforeUpdate();
		}
			
		
		
	}
}

