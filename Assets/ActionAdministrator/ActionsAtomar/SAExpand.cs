//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using UnityEngine;
using System.Collections.Generic;
using RuleAdministration.Administrators;
using System.Collections;
	
namespace RuleAdministration.Rules
{
	public class SAExpand : IAction
	{
								
		private string m_TypeName = worldXSingelton.UISelectedType;
		
		public void SetTypeName (string typename)
		{
			m_TypeName = typename;
		}
					
		/// <summary>
		/// Determines whether this instance is applicable.
		/// </summary>
		/// <returns><c>true</c> if this instance is applicable; otherwise, <c>false</c>.</returns>
		public override bool IsApplicable ()
		{	
			return CheckEnvironment (Tile.Pal.Base().Position, m_TypeName);
		}
			
		public override string Name ()
		{
			return "Expand";
		}
			
		public override void Update ()
		{
			
			Base spawnObject = worldXSingelton.CloneZombiPrefab (m_TypeName, Tile.Pal.Base().Position, Quaternion.identity).GetComponent<Base>();
			spawnObject.InitBy(Tile.Pal.Base());
			spawnObject.Type = m_TypeName;
			spawnObject.name = m_TypeName;
													
			
			spawnObject.gameObject.SetActive (true);
			GameObject.Destroy (Tile.Pal.gameObject);
			
			Vector2 pos = spawnObject.Position;
			worldXSingelton.Layer2Objects [(int)pos.x, (int)pos.y] = spawnObject;
			Tile.Pal = spawnObject.GetComponentInParent<Pal>();
			
		}
		
		public override void AfterUpdate ()
		{
			ActionAdministrator.Instance.ApplyAction <SARandomTransform>(Tile);
			Tile.Pal.Base().Health -= 1;
		}
			
		private bool[,] Neighborhood = new bool[3, 3]{ 
			{true,true,true},
			{true, false , true},
			{ true,true,true} };
			
		public bool CheckEnvironment (Vector2 center_pos, string type)
		{
					
			Dictionary<string, int> hits = RuleUtil.GetHitsFor (center_pos, Neighborhood);
								
			bool status = false;
		
				
		switch (type) {
		case("Boden"):
				status = true;
				break;
		case("A"):
				status = (hits ["A"] >= 1 || hits ["B"] >= 1 || hits ["C"] >= 1) // Or'd Minimal requirements
						&& hits ["A"] <= 4 && hits ["B"] <= 4 && hits ["C"] <= 4;
				break;
		case("B"):
				status = hits ["A"] >= 3 && hits ["A"] < int.MaxValue
						&& hits ["B"] >= 0 && hits ["B"] <= 0 
						&& hits ["C"] >= 0 && hits ["C"] < int.MaxValue;
				break;
		case("C"):
				status = hits ["A"] >= 3 && hits ["A"] < int.MaxValue
						&& hits ["B"] >= 2 && hits ["B"] < int.MaxValue
						&& hits ["C"] >= 0 && hits ["C"] < int.MaxValue;
								         
					break;
			}
				return status;
			}
		
		
	}
}

