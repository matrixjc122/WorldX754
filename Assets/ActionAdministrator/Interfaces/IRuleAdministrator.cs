//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;


namespace RuleAdministration.Interfaces
{
	    /// <summary>
	    /// I rule administrator.
	    /// </summary>
		public interface IRuleAdministrator
		{
		/// <summary>
		/// Create a default constructed instance of type T
		/// and forward to overloaded method.
		/// </summary>
		/// <param name="obj">Object.</param>
		/// <typeparam name="T">The 1st type parameter.</typeparam>
		void ApplyAction<T>(params Tile[] obj) where T:new();

		/// <summary>
		/// Applies the action to the GameObject. This process contains
		/// the IAction.IsApplicable check. If this check true, the 
		/// IAction.ProcessAction is called. Both calls use the given
		/// GameObject to determine the outcome of an action.
		/// </summary>
		/// <param name="obj">Object.</param>
		/// <param name="action">Action.</param>
		void ApplyAction(IAction action, params Tile[]  obj);

//			void RegisterRule(string type, /*string category,*/ IAction rule);
		}
}

