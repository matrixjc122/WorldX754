//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using UnityEngine;
using System.Collections.Generic;
using RuleAdministration.Administrators;
using System.Collections;
	
namespace RuleAdministration.Rules
{
	public class ExpandAction : IAction
	{
				#region constructors
			
		public ExpandAction ()
		{
			
		}
		
					#endregion
				
								
		private string m_TypeName = worldXSingelton.UISelectedType;
		
		public void SetTypeName (string typename)
		{
			m_TypeName = typename;
		}
					
		private bool[,] Neighborhood = new bool[3, 3]{ 
			{true,true,true},
			{true, false , true},
			{ true,true,true} };
		/// <summary>
		/// Determines whether this instance is applicable.
		/// </summary>
		/// <returns><c>true</c> if this instance is applicable; otherwise, <c>false</c>.</returns>
		public bool IsApplicable (params  GameObject[] list)
		{
			bool status = true;

			foreach (GameObject obj in list) {
				Common obj_common = obj.GetComponent<Common> ();
				if (obj_common == null) { 
					Debug.LogError ("The passed object is not placable. It doesn't contain a Common behaviour.");
					return false;
				}					
			
				status &= CheckEnvironment (obj.GetComponent<Common> ().FigurePosition, m_TypeName);
			}
			return status;
		}
			
		public string Name ()
		{
			return "ExpandAction";
		}
			
		public void Update (params GameObject[] list)
		{
			
			foreach (GameObject obj in list) {
				GameObject spawnObject = worldXSingelton.CloneZombiPrefab (m_TypeName, obj.transform.position, Quaternion.identity);
				spawnObject.GetComponent<Common> ().FigurePosition = obj.GetComponent<Common> ().FigurePosition;
				spawnObject.GetComponent<Common> ().FigureType = m_TypeName;
									
				Vector2 FigurePosition = spawnObject.GetComponent<Common> ().FigurePosition;
				worldXSingelton.WorldObjects [(int)FigurePosition.x, (int)FigurePosition.y] = spawnObject;
				spawnObject.SetActive (true);
				spawnObject.name = m_TypeName;
			
				GameObject.Destroy (obj);
			}
			
		}

		public void BeforeUpdate (params GameObject[] list)
		{
		}
			
		public bool CheckEnvironment (Vector2 center_pos, string type)
		{
						
			Dictionary<string, int> hits = RuleUtil.GetHitsFor (center_pos, Neighborhood);
									
			bool status = false;
			
				
			switch (type) {
			case("Boden"):
				status = true;
				break;
			case("A"):
				status = (hits ["A"] >= 1 || hits ["B"] >= 1 || hits ["C"] >= 1) // Or'd Minimal requirements
					&& hits ["A"] <= 4 && hits ["B"] <= 4 && hits ["C"] <= 4;
				break;
			case("B"):
				status = hits ["A"] >= 3 && hits ["A"] < int.MaxValue
					&& hits ["B"] >= 0 && hits ["B"] <= 0 
					&& hits ["C"] >= 0 && hits ["C"] < int.MaxValue;
				break;
			case("C"):
				status = hits ["A"] >= 3 && hits ["A"] < int.MaxValue
					&& hits ["B"] >= 2 && hits ["B"] < int.MaxValue
					&& hits ["C"] >= 0 && hits ["C"] < int.MaxValue;
								         
				break;
			}
			return status;
		}
		
	}
}

