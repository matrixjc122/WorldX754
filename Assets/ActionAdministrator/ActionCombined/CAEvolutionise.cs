//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using UnityEngine;
using System.Collections.Generic;
using RuleAdministration.Administrators;
using System.Collections;
	
namespace RuleAdministration.Rules
{
	public class CAEvolutionise : IAction
	{
		
		Common m_currentobject;

		public Common CurrentObject {
			get
			{
				return m_currentobject;
			}
			set
			{
				m_currentobject = value;
				m_upgrade = new SAUpgrade();
				m_upgrade.SetObject(value);
				m_downgrade = new SADowngrade();
				m_downgrade.SetObject(value);
			}
		}

		

	
		private SAUpgrade m_upgrade;
		private SADowngrade m_downgrade;
		private int m_update_state = 0;	
		
		public CAEvolutionise ()
		{
			
		}
		
		
		
		public bool IsApplicable ()
		{
			
			if((this as IAction).CurrentObject.FigureWillpower > 0.9)
			{
				m_update_state = 1;
				return m_upgrade.IsApplicable();
			}else if((this as IAction).CurrentObject.FigureWillpower < 0.0)
			{
				m_update_state = -1;
				return m_downgrade.IsApplicable();
			}else{
				m_update_state = 0;
				return true;
			}
			
			
			
			
		}
			
		public string Name ()
		{
			return "Evolutionise";
		}
			
		public void Update ()
		{
			switch(m_update_state)
			{
			case 1: ActionAdministrator.Instance.ApplyAction(m_upgrade,(this as IAction).CurrentObject); break;
			case -1: ActionAdministrator.Instance.ApplyAction(m_downgrade, (this as IAction).CurrentObject); break;	
			}
			
			(this as IAction).CurrentObject.FigureWillpower -= 0.1f;
			
		}

		public void BeforeUpdate ()
		{
		}
			
		
		
	}
}

