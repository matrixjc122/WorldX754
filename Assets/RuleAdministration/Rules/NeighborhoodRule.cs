//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using UnityEngine;
using System.Collections.Generic;


namespace RuleAdministration.Rules
{
		public class NeighborhoodRule : IRule
		{
			#region constructors

			public NeighborhoodRule ()
			{
			}

			#endregion

			#region IRule implementation
			
			/// <summary>
			/// Determines whether this instance is applicable.
			/// </summary>
			/// <returns><c>true</c> if this instance is applicable; otherwise, <c>false</c>.</returns>
			public bool IsApplicable (GameObject obj)
			{
				return obj.GetComponent<Common>() != null;
			}
			

			public bool IsPlaceable(GameObject obj)
			{
				Common obj_common = obj.GetComponent<Common> ();
				if(obj_common == null)
				{ 
					Debug.LogError("The passed object is not placable. It doesn't contain a Common behaviour.");
					return false;
				}
				
				Dictionary<string, int> hits = RuleUtil.GetHitsFor (obj,null);
				string type = obj_common.FigureType;
				bool isPlaceable = false;
				switch (type) {
				case("Boden"):
					isPlaceable = true;
					break;
				case("A"):
					isPlaceable = (hits ["A"] >= 1 || hits ["B"] >= 1 || hits ["C"] >= 1) // Or'd Minimal requirements
						&& hits ["A"] <= 4 && hits ["B"] <= 4 && hits ["C"] <= 4;
					break;
				case("B"):
					
					isPlaceable = hits ["A"] >= 3 && hits ["A"] < int.MaxValue
						&& hits ["B"] >= 0 && hits ["B"] <= 0 
							&& hits ["C"] >= 0 && hits ["C"] < int.MaxValue;
					
					break;
				case("C"):
					
					isPlaceable = hits ["A"] >= 3 && hits ["A"] < int.MaxValue
						&& hits ["B"] >= 2 && hits ["B"] < int.MaxValue
							&& hits ["C"] >= 0 && hits ["C"] < int.MaxValue;
					
					break;
				}
				return isPlaceable;
			}
		


			/// <summary>
			/// Corals the is placeable.
			/// </summary>
			/// <returns><c>true</c>, if is placeable was coraled, <c>false</c> otherwise.</returns>
			public bool CoralIsPlaceable (/* board cell */)
			{
				// if (board cell.neighbors contains at least 3 leaf corals) return true;
				// return false;
				throw new NotImplementedException ();
			}

			#endregion

			

		virtual public bool[,] Neighborhood{ get; set;}
//	= new bool[3,3]
//	{
//		{true,true,true},
//		{true,false,true},
//		{true,true,true}
//	};

		}
}

