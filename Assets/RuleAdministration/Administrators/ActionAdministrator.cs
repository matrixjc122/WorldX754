//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using System.Collections.Generic;
using UnityEngine;

namespace RuleAdministration.Administrators
{       
		/// <summary>
		/// Coral rule administrator.
		/// </summary>
		public class ActionAdministrator : IRuleAdministrator
		{
			#region private members

				private static ActionAdministrator _instance = new ActionAdministrator ();
				private Dictionary<string, Dictionary<string,IAction> > _AssociatedRules;
				public IErrorMessage _ErrorMessage = new ErrorMessage ();
			

			#endregion

			#region properties
			
				/// <summary>
				/// Gets the instance.
				/// </summary>
				/// <value>The instance.</value>
				public static ActionAdministrator Instance {
						get {
								if (_instance == null) {
										_instance = new ActionAdministrator ();
								}
								return _instance;
						}
				}

				public void RegisterRule (string type, IAction rule)
				{
						if (_AssociatedRules == null)
								_AssociatedRules = new Dictionary<string , Dictionary<string,IAction> > ();
						if (!_AssociatedRules.ContainsKey (type))
								_AssociatedRules.Add (type, new Dictionary<string, IAction> ()); 
						_AssociatedRules [type].Add (rule.Name(), rule);
				}

			#endregion

			#region constructors

			public void ApplyActionGlobal<T> () where T : new()
			{
				ApplyActionGlobal(new T() as IAction);	
			}
	
			public void ApplyActionGlobal (IAction action)
			{
				for(int x = 0 ; x < worldXSingelton.WorldObjects.GetLength(0); x++)
				{
					for(int y = 0 ; y < worldXSingelton.WorldObjects.GetLength(1); y++)
					{
						this.ApplyAction(worldXSingelton.WorldObjects[x,y], action);
					}	
				}
			}
		
  /// <summary>
			/// Initializes a new instance of the <see cref="RuleAdministration.Administrators.CoralRuleAdministrator"/> class.
			/// </summary>
			private ActionAdministrator ()
			{
			}

			
	
			public void ApplyAction (GameObject current, IAction action)
			{
			string current_type = current.GetComponent<Common> ().FigureType;	
			
			//--------------------------------
			_ErrorMessage.ClearState ();
			_ErrorMessage.Report ("ApplyActions for type: " + current_type);
			_ErrorMessage.State = true;
			//--------------------------------	
			
			
			_ErrorMessage.State &= action.IsApplicable (current);
			if(_ErrorMessage.State) {
				_ErrorMessage.State &= action.ProcessAction (current);
				
				//--------------------------------
				_ErrorMessage.Report (action.Name () + " Processed " + _ErrorMessage.State);
				//--------------------------------
				
			} else {
				//--------------------------------
				_ErrorMessage.Report (action.Name () + " is not applicable!");
				//--------------------------------
				
			}	
		}
		
		
		
		/// <summary>
		/// Applies the rules. 
		/// </summary>
				
				public void ApplyAction<T> (GameObject current) where T:new()
				{
					ApplyAction(current, new T() as IAction);
				}


			#endregion

				
		}
}

