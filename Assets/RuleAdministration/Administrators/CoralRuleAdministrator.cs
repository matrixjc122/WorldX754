//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using RuleAdministration.Interfaces;
using System.Collections.Generic;


namespace RuleAdministration.Administrators
{       
	    /// <summary>
	    /// Coral rule administrator.
	    /// </summary>
		public class CoralRuleAdministrator : IRuleAdministrator
		{
			#region private members

			private static CoralRuleAdministrator _instance = null;

			private IEnumerable<IRule> _rulesToApply = null;

			#endregion

			#region properties
			
			/// <summary>
			/// Gets the instance.
			/// </summary>
			/// <value>The instance.</value>
			public CoralRuleAdministrator Instance 
			{
				get
				{
					if (_instance == null)
					{
					_instance = new CoralRuleAdministrator();
					}
					return _instance;
				}
			}

			#endregion

			#region constructors

			/// <summary>
			/// Initializes a new instance of the <see cref="RuleAdministration.Administrators.CoralRuleAdministrator"/> class.
			/// </summary>
			private CoralRuleAdministrator ()
			{
			}

			#endregion

			#region IRuleAdministrator implementation
			
			/// <summary>
			/// Applies the rules.
			/// </summary>
			public void ApplyRules (/*coral type, board cell*/)
			{
				foreach (IRule rule in _rulesToApply) 
				{
					if(rule.IsApplicable(/* coral type */)) 
					{
						if(rule.CoralIsPlaceable(/* board cell */)) 
						{
							// set object on corresponding field
						}
					}
				}
			}

			#endregion

				
		}
}

